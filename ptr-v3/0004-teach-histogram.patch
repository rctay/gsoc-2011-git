From a654ecad3acba4e5d093ca75e5b406a057fb4fb8 Mon Sep 17 00:00:00 2001
From: Tay Ray Chuan <rctay89@gmail.com>
Date: Mon, 20 Jun 2011 12:41:00 +0800
Subject: [PATCH 04/45] teach --histogram

---
 Makefile           |    2 +-
 diff.c             |    2 +
 merge-recursive.c  |    2 +
 xdiff/xdiff.h      |    1 +
 xdiff/xdiffi.c     |    3 +
 xdiff/xdiffi.h     |    2 +
 xdiff/xhistogram.c |  355 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 xdiff/xprepare.c   |    3 +-
 8 files changed, 368 insertions(+), 2 deletions(-)
 create mode 100644 xdiff/xhistogram.c

diff --git a/Makefile b/Makefile
index 775ee83..9930e6b 100644
--- a/Makefile
+++ b/Makefile
@@ -1836,7 +1836,7 @@ ifndef NO_CURL
 	GIT_OBJS += http.o http-walker.o remote-curl.o
 endif
 XDIFF_OBJS = xdiff/xdiffi.o xdiff/xprepare.o xdiff/xutils.o xdiff/xemit.o \
-	xdiff/xmerge.o xdiff/xpatience.o
+	xdiff/xmerge.o xdiff/xpatience.o xdiff/xhistogram.o
 VCSSVN_OBJS = vcs-svn/string_pool.o vcs-svn/line_buffer.o \
 	vcs-svn/repo_tree.o vcs-svn/fast_export.o vcs-svn/svndump.o
 VCSSVN_TEST_OBJS = test-obj-pool.o test-string-pool.o \
diff --git a/diff.c b/diff.c
index 5422c43..a113294 100644
--- a/diff.c
+++ b/diff.c
@@ -3186,6 +3186,8 @@ int diff_opt_parse(struct diff_options *options, const char **av, int ac)
 		DIFF_XDL_SET(options, IGNORE_WHITESPACE_AT_EOL);
 	else if (!strcmp(arg, "--patience"))
 		DIFF_XDL_SET(options, PATIENCE_DIFF);
+	else if (!strcmp(arg, "--histogram"))
+		DIFF_XDL_SET(options, HISTOGRAM_DIFF);
 
 	/* flags options */
 	else if (!strcmp(arg, "--binary")) {
diff --git a/merge-recursive.c b/merge-recursive.c
index 16c2dbe..3e8267b 100644
--- a/merge-recursive.c
+++ b/merge-recursive.c
@@ -1773,6 +1773,8 @@ int parse_merge_opt(struct merge_options *o, const char *s)
 		o->subtree_shift = s + strlen("subtree=");
 	else if (!strcmp(s, "patience"))
 		o->xdl_opts |= XDF_PATIENCE_DIFF;
+	else if (!strcmp(s, "histogram"))
+		o->xdl_opts |= XDF_HISTOGRAM_DIFF;
 	else if (!strcmp(s, "ignore-space-change"))
 		o->xdl_opts |= XDF_IGNORE_WHITESPACE_CHANGE;
 	else if (!strcmp(s, "ignore-all-space"))
diff --git a/xdiff/xdiff.h b/xdiff/xdiff.h
index 711048e..c26170c 100644
--- a/xdiff/xdiff.h
+++ b/xdiff/xdiff.h
@@ -33,6 +33,7 @@ extern "C" {
 #define XDF_IGNORE_WHITESPACE_CHANGE (1 << 3)
 #define XDF_IGNORE_WHITESPACE_AT_EOL (1 << 4)
 #define XDF_PATIENCE_DIFF (1 << 5)
+#define XDF_HISTOGRAM_DIFF (1 << 6)
 #define XDF_WHITESPACE_FLAGS (XDF_IGNORE_WHITESPACE | XDF_IGNORE_WHITESPACE_CHANGE | XDF_IGNORE_WHITESPACE_AT_EOL)
 
 #define XDL_PATCH_NORMAL '-'
diff --git a/xdiff/xdiffi.c b/xdiff/xdiffi.c
index da67c04..75a3922 100644
--- a/xdiff/xdiffi.c
+++ b/xdiff/xdiffi.c
@@ -331,6 +331,9 @@ int xdl_do_diff(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,
 	if (xpp->flags & XDF_PATIENCE_DIFF)
 		return xdl_do_patience_diff(mf1, mf2, xpp, xe);
 
+	if (xpp->flags & XDF_HISTOGRAM_DIFF)
+		return xdl_do_histogram_diff(mf1, mf2, xpp, xe);
+
 	if (xdl_prepare_env(mf1, mf2, xpp, xe) < 0) {
 
 		return -1;
diff --git a/xdiff/xdiffi.h b/xdiff/xdiffi.h
index ad033a8..7a92ea9 100644
--- a/xdiff/xdiffi.h
+++ b/xdiff/xdiffi.h
@@ -57,5 +57,7 @@ int xdl_emit_diff(xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb,
 		  xdemitconf_t const *xecfg);
 int xdl_do_patience_diff(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,
 		xdfenv_t *env);
+int xdl_do_histogram_diff(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,
+		xdfenv_t *env);
 
 #endif /* #if !defined(XDIFFI_H) */
diff --git a/xdiff/xhistogram.c b/xdiff/xhistogram.c
new file mode 100644
index 0000000..08cbf46
--- /dev/null
+++ b/xdiff/xhistogram.c
@@ -0,0 +1,355 @@
+#include "xinclude.h"
+#include "xtypes.h"
+#include "xdiff.h"
+
+#define REC_NEXT_SHIFT	(28 + 8)
+#define REC_PTR_SHIFT	8
+#define REC_PTR_MASK	((1 << 28) - 1)
+#define REC_CNT_MASK	((1 << 8) - 1)
+#define MAX_PTR		REC_PTR_MASK
+#define MAX_CNT		(1 << 8) - 1
+
+#define REC_CREATE(n, p, c) \
+	(((long) n << REC_NEXT_SHIFT) \
+	| ((long) p << REC_PTR_SHIFT) \
+	| c)
+#define REC_NEXT(r) ((int) (r >> REC_NEXT_SHIFT))
+#define REC_PTR(r) \
+	(((int) (r >> REC_PTR_SHIFT)) & REC_PTR_MASK)
+#define REC_CNT(a) (((int) a) & REC_CNT_MASK)
+
+#define LINE_END(s, c) (s+c-1)
+
+struct histindex {
+	int *table;
+	unsigned int table_size;
+
+	long *recs;
+	unsigned int recs_size, recs_count;
+
+	int *next;
+	int *rec_idxs;
+	unsigned int size;
+
+	unsigned int max_chain_length;
+	int key_shift;
+	int ptr_shift;
+	unsigned int cnt;
+	unsigned int has_common;
+
+	xdfenv_t *env;
+	xpparam_t const *xpp;
+};
+
+struct region {
+	int begin1, end1;
+	int begin2, end2;
+};
+
+#define LCS_REPLACE	1
+#define LCS_DELETE	2
+#define LCS_INSERT		3
+#define LCS_EMPTY		4
+
+static int region_type(struct region *lcs)
+{
+	if (lcs->begin1 < lcs->end1)
+		if (lcs->begin2 < lcs->end2)
+			return LCS_REPLACE;
+		else
+			return LCS_DELETE;
+	else
+		if (lcs->begin2 < lcs->end2)
+			return LCS_INSERT;
+		else
+			return LCS_EMPTY;
+}
+
+#define INDEX_NEXT(i, a) (i->next[(a) - i->ptr_shift])
+#define INDEX_REC_IDXS(i, a) (i->rec_idxs[(a) - i->ptr_shift])
+
+static xdfile_t *map_side(struct histindex *index, int s)
+{
+	return s == 1 ? &index->env->xdf1 : &index->env->xdf2;
+}
+
+static int cmp(struct histindex *index,
+	int side1, int line1, int side2, int line2)
+{
+	xrecord_t *r1 = (map_side(index, side1))->recs[line1 - 1],
+		  *r2 = (map_side(index, side2))->recs[line2 - 1];
+	return xdl_recmatch(r1->ptr, r1->size, r2->ptr, r2->size,
+			    index->xpp->flags);
+}
+
+static unsigned int table_hash(struct histindex *index, int side, int line)
+{
+	return xdl_table_key((map_side(index, side))->recs[line - 1]->ha, index->key_shift);
+}
+
+static void print_record(struct histindex *index, int side, int line)
+{
+	xrecord_t *rec = (map_side(index, side))->recs[line - 1];
+	char *str;
+	str = xdl_malloc(rec->size+1);
+	strncpy(str, rec->ptr, rec->size);
+	str[rec->size+1] = '\0';
+	free(str);
+}
+
+static int scanA(struct histindex *index, int line1, int count1)
+{
+	int ptr, rec_idx, tbl_idx;
+	int chain_len;
+	int new_cnt;
+	long rec;
+
+	for (ptr = LINE_END(line1, count1); line1 <= ptr; ptr--) {
+		tbl_idx = table_hash(index, 1, ptr);
+
+		chain_len = 0;
+		for (rec_idx = index->table[tbl_idx]; rec_idx != 0; ) {
+			rec = index->recs[rec_idx];
+			if (cmp(index, 1, REC_PTR(rec), 1, ptr)) {
+				new_cnt = REC_CNT(rec) + 1;
+				if (new_cnt > MAX_CNT)
+					new_cnt = MAX_CNT;
+				index->recs[rec_idx] = REC_CREATE(REC_NEXT(rec), ptr, new_cnt);
+				INDEX_NEXT(index, ptr) = REC_PTR(rec);
+				INDEX_REC_IDXS(index, ptr) = rec_idx;
+				goto continue_scan;
+			}
+
+			rec_idx = REC_NEXT(rec);
+			chain_len++;
+		}
+
+		if (chain_len == index->max_chain_length)
+			return -1;
+
+		rec_idx = ++index->recs_count;
+		if (rec_idx == index->recs_size) {
+			index->recs_size = XDL_MIN(index->recs_size << 1, 1 + count1);
+			if (!(index->recs = (long *) xdl_realloc(index->recs, sizeof(*index->recs) * index->recs_size)))
+				return -1;
+		}
+
+		index->recs[rec_idx] = REC_CREATE(index->table[tbl_idx], ptr, 1);
+		INDEX_REC_IDXS(index, ptr) = rec_idx;
+		index->table[tbl_idx] = rec_idx;
+
+continue_scan:
+		; /* no op */
+	}
+
+	return 0;
+}
+
+static int try_lcs(struct histindex *index, struct region *lcs, int b_ptr,
+	int line1, int count1, int line2, int count2)
+{
+	int b_next = b_ptr + 1;
+	int rec_idx = index->table[table_hash(index, 2, b_ptr)];
+	long rec;
+	int as, ae, bs, be, np, rc;
+	int should_break;
+
+	for (rec; rec_idx != 0; rec_idx = REC_NEXT(rec)) {
+		rec = index->recs[rec_idx];
+
+		if (REC_CNT(rec) > index->cnt) {
+			if (!index->has_common)
+				index->has_common = cmp(index, 1, REC_PTR(rec), 2, b_ptr);
+			continue;
+		}
+
+		as = REC_PTR(rec);
+		if (!cmp(index, 1, as, 2, b_ptr))
+			continue;
+
+		index->has_common = 1;
+		for (;;) {
+			should_break = 0;
+			np = INDEX_NEXT(index, as);
+			bs = b_ptr;
+			ae = as + 1;
+			be = bs + 1;
+			rc = REC_CNT(rec);
+
+			while (line1 < as && line2 < bs
+				&& cmp(index, 1, as-1, 2, bs-1)) {
+				as--;
+				bs--;
+				if (1 < rc)
+					rc = XDL_MIN(rc, REC_CNT(index->recs[INDEX_REC_IDXS(index, as)]));
+			}
+			while (ae < LINE_END(line1, count1) && be < LINE_END(line2, count2)
+				&& cmp(index, 1, ae+1, 2, be+1)) {
+				if (1 < rc)
+					rc = XDL_MIN(rc, REC_CNT(index->recs[INDEX_REC_IDXS(index, ae)]));
+				ae++;
+				be++;
+			}
+
+			if (b_next < be)
+				b_next = be;
+			if (lcs->end1 - lcs->begin1 < ae - as || rc < index->cnt) {
+				lcs->begin1 = as;
+				lcs->begin2 = bs;
+				lcs->end1 = ae;
+				lcs->end2 = be;
+				index->cnt = rc;
+			}
+
+			if (np == 0)
+				break;
+
+			while (np < ae) {
+				np = INDEX_NEXT(index, np);
+				if (np == 0) {
+					should_break = 1;
+					break;
+				}
+			}
+
+			if (should_break)
+				break;
+
+			as = np;
+		}
+	}
+	return b_next;
+}
+
+static int find_lcs(struct histindex *index, struct region *lcs,
+	int line1, int count1, int line2, int count2) {
+	int b_ptr;
+
+	if (scanA(index, line1, count1))
+		return -1;
+
+	index->cnt = index->max_chain_length + 1;
+
+	for (b_ptr = line2; b_ptr <= LINE_END(line2, count2); )
+		b_ptr = try_lcs(index, lcs, b_ptr, line1, count1, line2, count2);
+
+	return index->has_common && index->max_chain_length < index->cnt;
+}
+
+static void reduce_common_start_end(struct histindex *index,
+	int *line1, int *count1, int *line2, int *count2)
+{
+	if (*count1 <= 1 || *count2 <= 1)
+		return;
+	while (*count1 > 1 && *count2 > 1 && cmp(index, 1, *line1, 2, *line2)) {
+		(*line1)++;
+		(*count1)--;
+		(*line2)++;
+		(*count2)--;
+	}
+	while (*count1 > 1 && *count2 > 1 && cmp(index, 1, LINE_END(*line1, *count1), 2, LINE_END(*line2, *count2))) {
+		(*count1)--;
+		(*count2)--;
+	}
+}
+
+static int histogram_diff(mmfile_t *file1, mmfile_t *file2,
+	xpparam_t const *xpp, xdfenv_t *env,
+	int line1, int count1, int line2, int count2)
+{
+	struct histindex index;
+	struct region lcs;
+	int tbits = xdl_table_bits(count1);
+	int sz;
+	int result = -1;
+
+	if (!count1) {
+		while(count2--)
+			env->xdf2.rchg[line2++ - 1] = 1;
+		return 0;
+	} else if (!count2) {
+		while(count1--)
+			env->xdf1.rchg[line1++ - 1] = 1;
+		return 0;
+	}
+
+	memset(&index, 0, sizeof(index));
+
+	index.env = env;
+	index.xpp = xpp;
+
+ 	reduce_common_start_end(&index, &line1, &count1, &line2, &count2);
+
+	if (LINE_END(line1, count1) >= MAX_PTR)
+		return -1;
+
+	sz = index.table_size = 1 << tbits;
+	sz *= sizeof(int);
+	if (!(index.table = xdl_malloc(sz)))
+		goto cleanup_table;
+	memset(index.table, 0, sz);
+
+	sz = index.recs_size = XDL_MAX(4, count1 >> 3);
+	sz *= sizeof(long);
+	if (!(index.recs = xdl_malloc(sz)))
+		goto cleanup_recs;
+	memset(index.recs, 0, sz);
+
+	sz = index.size = count1;
+	sz *= sizeof(int);
+	if (!(index.next = xdl_malloc(sz)))
+		goto cleanup_next;
+	memset(index.next, 0, sz);
+
+	if (!(index.rec_idxs = xdl_malloc(sz)))
+		goto cleanup_rec_idxs;
+	memset(index.rec_idxs, 0, sz);
+
+	index.key_shift = 32 - tbits;
+	index.ptr_shift = line1;
+	index.max_chain_length = 64;
+
+	memset(&lcs, 0, sizeof(lcs));
+	if (find_lcs(&index, &lcs, line1, count1, line2, count2))
+		; /* TODO */
+	else {
+		if (region_type(&lcs) == LCS_EMPTY) {
+			int ptr;
+			for (ptr = 0; ptr < count1; ptr++)
+				env->xdf1.rchg[line1 + ptr - 1] = 1;
+			for (ptr = 0; ptr < count2; ptr++)
+				env->xdf2.rchg[line2 + ptr - 1] = 1;
+		} else {
+			histogram_diff(file1, file2, xpp, env,
+				line1, lcs.begin1 - line1,
+				line2, lcs.begin2 - line2);
+			histogram_diff(file1, file2, xpp, env,
+				lcs.end1, line1 + count1 - lcs.end1,
+				lcs.end2, line2 + count2 - lcs.end2);
+		}
+	}
+
+	result = 0;
+
+	xdl_free(index.rec_idxs);
+cleanup_rec_idxs:
+	xdl_free(index.next);
+cleanup_next:
+	xdl_free(index.recs);
+cleanup_recs:
+	xdl_free(index.table);
+cleanup_table:
+	; /* no-op */
+
+	return result;
+}
+
+int xdl_do_histogram_diff(mmfile_t *file1, mmfile_t *file2,
+	xpparam_t const *xpp, xdfenv_t *env)
+{
+	if (xdl_prepare_env(file1, file2, xpp, env) < 0)
+		return -1;
+
+	return histogram_diff(file1, file2, xpp, env,
+		1, env->xdf1.nrec, 1, env->xdf2.nrec);
+}
\ No newline at end of file
diff --git a/xdiff/xprepare.c b/xdiff/xprepare.c
index 04060af..ad3d5f5 100644
--- a/xdiff/xprepare.c
+++ b/xdiff/xprepare.c
@@ -123,7 +123,7 @@ static int xdl_classify_record(xdlclassifier_t *cf, xrecord_t **rhash, unsigned
 		cf->rchash[hi] = rcrec;
 	}
 
-	if (!(xpp->flags & XDF_PATIENCE_DIFF))
+	if (!(xpp->flags & XDF_PATIENCE_DIFF) && !(xpp->flags & XDF_HISTOGRAM_DIFF))
 		rec->ha = (unsigned long) rcrec->idx;
 
 	hi = (long) XDL_HASHLONG(rec->ha, hbits);
@@ -292,6 +292,7 @@ int xdl_prepare_env(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,
 	xdl_free_classifier(&cf);
 
 	if (!(xpp->flags & XDF_PATIENCE_DIFF) &&
+			!(xpp->flags & XDF_HISTOGRAM_DIFF) &&
 			xdl_optimize_ctxs(&xe->xdf1, &xe->xdf2) < 0) {
 
 		xdl_free_ctx(&xe->xdf2);
-- 
1.7.6.12.g6486a.dirty


From 91fa099bc12c60ad28f45b2532d770ff57addbb5 Mon Sep 17 00:00:00 2001
From: Tay Ray Chuan <rctay89@gmail.com>
Date: Mon, 4 Jul 2011 20:01:49 +0800
Subject: [PATCH 25/28] allow each histogram_diff() call to have its own index

---
 xdiff/xhistogram.c |  142 ++++++++++++++++++++++++++-------------------------
 1 files changed, 72 insertions(+), 70 deletions(-)

diff --git a/xdiff/xhistogram.c b/xdiff/xhistogram.c
index 4ebc723..c3206de 100644
--- a/xdiff/xhistogram.c
+++ b/xdiff/xhistogram.c
@@ -49,18 +49,29 @@ struct region {
 #define INDEX_NEXT(i, a) (i->next[(a) - i->ptr_shift])
 #define INDEX_REC_IDXS(i, a) (i->rec_idxs[(a) - i->ptr_shift])
 
+static xdfile_t *map_env_side(xdfenv_t *env, int s)
+{
+	return s == 1 ? &env->xdf1 : &env->xdf2;
+}
+
 static xdfile_t *map_side(struct histindex *index, int s)
 {
-	return s == 1 ? &index->env->xdf1 : &index->env->xdf2;
+	return map_env_side(index->env, s);
 }
 
-static int cmp(struct histindex *index,
+static int cmp_env(xpparam_t const *xpp, xdfenv_t *env,
 	int side1, int line1, int side2, int line2)
 {
-	xrecord_t *r1 = (map_side(index, side1))->recs[line1 - 1],
-		  *r2 = (map_side(index, side2))->recs[line2 - 1];
+	xrecord_t *r1 = (map_env_side(env, side1))->recs[line1 - 1],
+		  *r2 = (map_env_side(env, side2))->recs[line2 - 1];
 	return xdl_recmatch(r1->ptr, r1->size, r2->ptr, r2->size,
-			    index->xpp->flags);
+			    xpp->flags);
+}
+
+static int cmp(struct histindex *index,
+	int side1, int line1, int side2, int line2)
+{
+	return cmp_env(index->xpp, index->env, side1, line1, side2, line2);
 }
 
 static unsigned int table_hash(struct histindex *index, int side, int line)
@@ -209,18 +220,18 @@ static int find_lcs(struct histindex *index, struct region *lcs,
 	return index->has_common && index->max_chain_length < index->cnt;
 }
 
-static void reduce_common_start_end(struct histindex *index,
+static void reduce_common_start_end(xpparam_t const *xpp, xdfenv_t *env,
 	int *line1, int *count1, int *line2, int *count2)
 {
 	if (*count1 <= 1 || *count2 <= 1)
 		return;
-	while (*count1 > 1 && *count2 > 1 && cmp(index, 1, *line1, 2, *line2)) {
+	while (*count1 > 1 && *count2 > 1 && cmp_env(xpp, env, 1, *line1, 2, *line2)) {
 		(*line1)++;
 		(*count1)--;
 		(*line2)++;
 		(*count2)--;
 	}
-	while (*count1 > 1 && *count2 > 1 && cmp(index, 1, LINE_END_PTR(1), 2, LINE_END_PTR(2))) {
+	while (*count1 > 1 && *count2 > 1 && cmp_env(xpp, env, 1, LINE_END_PTR(1), 2, LINE_END_PTR(2))) {
 		(*count1)--;
 		(*count2)--;
 	}
@@ -236,11 +247,13 @@ static int fall_back_to_classic_diff(struct histindex *index,
 				  line1, count1, line2, count2);
 }
 
-static int histogram_diff(struct histindex *index,
+static int histogram_diff(xpparam_t const *xpp, xdfenv_t *env,
 	int line1, int count1, int line2, int count2)
 {
+	struct histindex index;
 	struct region lcs;
-	int result;
+	int sz, tbits;
+	int result = -1;
 
 	if (count1 <= 0 && count2 <= 0)
 		return 0;
@@ -250,94 +263,69 @@ static int histogram_diff(struct histindex *index,
 
 	if (!count1) {
 		while(count2--)
-			index->env->xdf2.rchg[line2++ - 1] = 1;
+			env->xdf2.rchg[line2++ - 1] = 1;
 		return 0;
 	} else if (!count2) {
 		while(count1--)
-			index->env->xdf1.rchg[line1++ - 1] = 1;
+			env->xdf1.rchg[line1++ - 1] = 1;
 		return 0;
 	}
 
-	index->ptr_shift = line1;
-	index->has_common = 0;
-	index->cnt = 0;
-	index->recs_count = 0;
-
-	memset(index->table, 0, index->table_size * sizeof(int));
-	memset(index->recs, 0, index->recs_size * sizeof(long));
-	memset(index->next, 0, index->size * sizeof(int));
-	memset(index->rec_idxs, 0, index->size * sizeof(int));
-
-	memset(&lcs, 0, sizeof(lcs));
-	if (find_lcs(index, &lcs, line1, count1, line2, count2))
-		result = fall_back_to_classic_diff(index, line1, count1, line2, count2);
-	else {
-		result = 0;
-		if (lcs.begin1 == 0 && lcs.begin2 == 0) {
-			int ptr;
-			for (ptr = 0; ptr < count1; ptr++)
-				index->env->xdf1.rchg[line1 + ptr - 1] = 1;
-			for (ptr = 0; ptr < count2; ptr++)
-				index->env->xdf2.rchg[line2 + ptr - 1] = 1;
-		} else {
-			result = result || histogram_diff(index,
-				line1, lcs.begin1 - line1,
-				line2, lcs.begin2 - line2);
-			result = result || histogram_diff(index,
-				lcs.end1 + 1, LINE_END(1) - lcs.end1,
-				lcs.end2 + 1, LINE_END(2) - lcs.end2);
-			result *= -1;
-		}
-	}
-
-	return result;
-}
-
-int xdl_do_histogram_diff(mmfile_t *file1, mmfile_t *file2,
-	xpparam_t const *xpp, xdfenv_t *env)
-{
-	struct histindex index;
-	int sz, tbits;
-	int line1, line2, count1, count2;
-	int result = -1;
-
-	if (xdl_prepare_env(file1, file2, xpp, env) < 0)
-		goto cleanup;
-
 	index.env = env;
 	index.xpp = xpp;
 
-	line1 = line2 = 1;
-	count1 = env->xdf1.nrec;
-	count2 = env->xdf2.nrec;
-
- 	reduce_common_start_end(&index, &line1, &count1, &line2, &count2);
+	index.max_chain_length = 64;
+	index.ptr_shift = line1;
+	index.has_common = 0;
+	index.cnt = 0;
+	index.recs_count = 0;
 
 	tbits = xdl_table_bits(count1);
 
 	index.key_shift = 32 - tbits;
-	index.max_chain_length = 64;
-
 	sz = index.table_size = 1 << tbits;
 	sz *= sizeof(int);
 	if (!(index.table = xdl_malloc(sz)))
 		goto cleanup_table;
+	memset(index.table, 0, index.table_size * sizeof(int));
 
 	sz = index.recs_size = XDL_MAX(4, count1 >> 3);
 	sz *= sizeof(long);
 	if (!(index.recs = xdl_malloc(sz)))
 		goto cleanup_recs;
+	memset(index.recs, 0, index.recs_size * sizeof(long));
 
 	sz = index.size = count1;
 	sz *= sizeof(int);
 	if (!(index.next = xdl_malloc(sz)))
 		goto cleanup_next;
+	memset(index.next, 0, index.size * sizeof(int));
 
 	if (!(index.rec_idxs = xdl_malloc(sz)))
 		goto cleanup_rec_idxs;
+	memset(index.rec_idxs, 0, index.size * sizeof(int));
 
-	result = histogram_diff(&index,
-		line1, count1, line2, count2);
+	memset(&lcs, 0, sizeof(lcs));
+	if (find_lcs(&index, &lcs, line1, count1, line2, count2))
+		result = fall_back_to_classic_diff(&index, line1, count1, line2, count2);
+	else {
+		result = 0;
+		if (lcs.begin1 == 0 && lcs.begin2 == 0) {
+			int ptr;
+			for (ptr = 0; ptr < count1; ptr++)
+				env->xdf1.rchg[line1 + ptr - 1] = 1;
+			for (ptr = 0; ptr < count2; ptr++)
+				env->xdf2.rchg[line2 + ptr - 1] = 1;
+		} else {
+			result = result || histogram_diff(xpp, env,
+				line1, lcs.begin1 - line1,
+				line2, lcs.begin2 - line2);
+			result = result || histogram_diff(xpp, env,
+				lcs.end1 + 1, LINE_END(1) - lcs.end1,
+				lcs.end2 + 1, LINE_END(2) - lcs.end2);
+			result *= -1;
+		}
+	}
 
 	xdl_free(index.rec_idxs);
 cleanup_rec_idxs:
@@ -346,9 +334,23 @@ cleanup_next:
 	xdl_free(index.recs);
 cleanup_recs:
 	xdl_free(index.table);
-cleanup:
 cleanup_table:
-	; /* no-op */
-
 	return result;
 }
+
+int xdl_do_histogram_diff(mmfile_t *file1, mmfile_t *file2,
+	xpparam_t const *xpp, xdfenv_t *env)
+{
+	int line1, line2, count1, count2;
+
+	if (xdl_prepare_env(file1, file2, xpp, env) < 0)
+		return -1;
+
+	line1 = line2 = 1;
+	count1 = env->xdf1.nrec;
+	count2 = env->xdf2.nrec;
+
+ 	reduce_common_start_end(xpp, env, &line1, &count1, &line2, &count2);
+
+	return histogram_diff(xpp, env, line1, count1, line2, count2);
+}
-- 
1.7.6.12.g6486a.dirty


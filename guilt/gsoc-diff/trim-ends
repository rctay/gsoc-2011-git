diff --git a/xdiff/xprepare.c b/xdiff/xprepare.c
index 3ebad0f..94cad7f 100644
--- a/xdiff/xprepare.c
+++ b/xdiff/xprepare.c
@@ -53,11 +53,12 @@ static void xdl_free_classifier(xdlclassifier_t *cf);
 static int xdl_classify_record(xdlclassifier_t *cf, xrecord_t **rhash, unsigned int hbits,
 			       xrecord_t *rec);
 static int xdl_prepare_ctx(mmfile_t *mf, long narec, xpparam_t const *xpp,
-			   xdlclassifier_t *cf, xdfile_t *xdf);
+			   xdlclassifier_t *cf, xdfile_t *xdf, xrecord_t **arec);
 static void xdl_free_ctx(xdfile_t *xdf);
 static int xdl_clean_mmatch(char const *dis, long i, long s, long e);
 static int xdl_cleanup_records(xdfile_t *xdf1, xdfile_t *xdf2);
-static int xdl_trim_ends(xdfile_t *xdf1, xdfile_t *xdf2);
+static int xdl_trim_ends(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,
+			 xdfile_t *xdf1, xdfile_t *xdf2);
 static int xdl_optimize_ctxs(xdfile_t *xdf1, xdfile_t *xdf2);
 
 
@@ -130,8 +131,39 @@ static int xdl_classify_record(xdlclassifier_t *cf, xrecord_t **rhash, unsigned
 }
 
 
+/*
+ * Early trim initial and terminal matching records.
+ */
+static int xdl_trim_ends(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,
+			 xdfile_t *xdf1, xdfile_t *xdf2) {
+	long i;
+	char const *cur, *top;
+	char const *prev1, *prev2;
+
+	prev1 = xdf1->rstart = cur = mf1->ptr;
+	prev2 = xdf2->rstart = mf2->ptr;
+
+	top = cur + XDL_MIN(mf1->size, mf2->size);
+
+	/* TODO: trim on whitespace rules */
+	i = 0;
+	while (cur < top
+		&& (cur = memchr(cur, '\n', top - cur))
+		&& !memcmp(prev1, prev2, cur - prev1)) {
+		prev2 += ++cur - prev1;
+		prev1 = cur;
+		i++;
+	}
+	xdf1->dstart = xdf2->dstart = i;
+	xdf1->rstart = prev1;
+	xdf2->rstart = prev2;
+
+	return 0;
+}
+
+
 static int xdl_prepare_ctx(mmfile_t *mf, long narec, xpparam_t const *xpp,
-			   xdlclassifier_t *cf, xdfile_t *xdf) {
+			   xdlclassifier_t *cf, xdfile_t *xdf, xrecord_t **arec) {
 	unsigned int hbits;
 	long nrec, hsize, bsize;
 	unsigned long hav;
@@ -164,7 +196,15 @@ static int xdl_prepare_ctx(mmfile_t *mf, long narec, xpparam_t const *xpp,
 	if ((cur = blk = xdl_mmfile_first(mf, &bsize)) != NULL) {
 		for (top = blk + bsize; cur < top; ) {
 			prev = cur;
-			hav = xdl_hash_record(&cur, top, xpp->flags);
+			if (cur < xdf->rstart) {
+				if (arec) {
+					cur += arec[1]->ptr - arec[0]->ptr;
+					arec++;
+				} else
+					cur = memchr(cur, '\n', top - cur) + 1;
+				hav = 0;
+			} else
+				hav = xdl_hash_record(&cur, top, xpp->flags);
 			if (nrec >= narec) {
 				narec *= 2;
 				if (!(rrecs = (xrecord_t **) xdl_realloc(recs, narec * sizeof(xrecord_t *))))
@@ -178,7 +218,7 @@ static int xdl_prepare_ctx(mmfile_t *mf, long narec, xpparam_t const *xpp,
 			crec->ha = hav;
 			recs[nrec++] = crec;
 
-			if (xdl_classify_record(cf, rhash, hbits, crec) < 0)
+			if (nrec > xdf->dstart && xdl_classify_record(cf, rhash, hbits, crec) < 0)
 				goto abort;
 		}
 	}
@@ -200,7 +240,6 @@ static int xdl_prepare_ctx(mmfile_t *mf, long narec, xpparam_t const *xpp,
 	xdf->rindex = rindex;
 	xdf->nreff = 0;
 	xdf->ha = ha;
-	xdf->dstart = 0;
 	xdf->dend = nrec - 1;
 
 	return 0;
@@ -240,12 +279,18 @@ int xdl_prepare_env(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,
 		return -1;
 	}
 
-	if (xdl_prepare_ctx(mf1, enl1, xpp, &cf, &xe->xdf1) < 0) {
+	if (xdl_trim_ends(mf1, mf2, xpp, &xe->xdf1, &xe->xdf2) < 0) {
+
+		xdl_free_classifier(&cf);
+		return -1;
+	}
+
+	if (xdl_prepare_ctx(mf1, enl1, xpp, &cf, &xe->xdf1, NULL) < 0) {
 
 		xdl_free_classifier(&cf);
 		return -1;
 	}
-	if (xdl_prepare_ctx(mf2, enl2, xpp, &cf, &xe->xdf2) < 0) {
+	if (xdl_prepare_ctx(mf2, enl2, xpp, &cf, &xe->xdf2, xe->xdf1.recs) < 0) {
 
 		xdl_free_ctx(&xe->xdf1);
 		xdl_free_classifier(&cf);
@@ -403,39 +448,9 @@ static int xdl_cleanup_records(xdfile_t *xdf1, xdfile_t *xdf2) {
 }
 
 
-/*
- * Early trim initial and terminal matching records.
- */
-static int xdl_trim_ends(xdfile_t *xdf1, xdfile_t *xdf2) {
-	long i, lim;
-	xrecord_t **recs1, **recs2;
-
-	recs1 = xdf1->recs;
-	recs2 = xdf2->recs;
-	for (i = 0, lim = XDL_MIN(xdf1->nrec, xdf2->nrec); i < lim;
-	     i++, recs1++, recs2++)
-		if ((*recs1)->ha != (*recs2)->ha)
-			break;
-
-	xdf1->dstart = xdf2->dstart = i;
-
-	recs1 = xdf1->recs + xdf1->nrec - 1;
-	recs2 = xdf2->recs + xdf2->nrec - 1;
-	for (lim -= i, i = 0; i < lim; i++, recs1--, recs2--)
-		if ((*recs1)->ha != (*recs2)->ha)
-			break;
-
-	xdf1->dend = xdf1->nrec - i - 1;
-	xdf2->dend = xdf2->nrec - i - 1;
-
-	return 0;
-}
-
-
 static int xdl_optimize_ctxs(xdfile_t *xdf1, xdfile_t *xdf2) {
 
-	if (xdl_trim_ends(xdf1, xdf2) < 0 ||
-	    xdl_cleanup_records(xdf1, xdf2) < 0) {
+	if (xdl_cleanup_records(xdf1, xdf2) < 0) {
 
 		return -1;
 	}
diff --git a/xdiff/xtypes.h b/xdiff/xtypes.h
index 2511aef..6330a9f 100644
--- a/xdiff/xtypes.h
+++ b/xdiff/xtypes.h
@@ -51,6 +51,7 @@ typedef struct s_xdfile {
 	unsigned int hbits;
 	xrecord_t **rhash;
 	long dstart, dend;
+	const char *rstart, *rend;
 	xrecord_t **recs;
 	char *rchg;
 	long *rindex;
